# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.10.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PWD}@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__HIDE_SENSITIVE_VAR_CONN_FIELDS: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    RH_DATA_FILE: ${RH_DATA_FILE}
    SPORTS_DATA_FILE: ${SPORTS_DATA_FILE}
    POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
    POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER}
    POSTGRES_ADMIN_PWD: ${POSTGRES_ADMIN_PWD}
    DAG_PACKAGE: ${DAG_PACKAGE}
    POSTGRES_DB_HOST: ${POSTGRES_DB_HOST}
    SPORT_DATA_SQL_ALCHEMY_CONN: ${SPORT_DATA_SQL_ALCHEMY_CONN}
    # yamllint disable rule:line-length
    # Use simple hAttp server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ./docker/airflow/config:/opt/airflow/config
    - ./docker/airflow/dags:/opt/airflow/dags
    - ./docker/airflow/logs:/opt/airflow/logs
    - ./docker/airflow/plugins:/opt/airflow/plugins
    - ./docker/airflow/dags/${DAG_PACKAGE}:/opt/airflow/dags/${DAG_PACKAGE}
    - ./scripts/${DAG_PACKAGE}/__init__.py:/opt/airflow/dags/${DAG_PACKAGE}/__init__.py
    - ./scripts/${DAG_PACKAGE}/functions.py:/opt/airflow/dags/${DAG_PACKAGE}/functions.py
    - ./scripts/${DAG_PACKAGE}/${DAG_PACKAGE}.py:/opt/airflow/dags/${DAG_PACKAGE}/${DAG_PACKAGE}.py
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    sport-data-db:
      condition: service_healthy
services:
  sport-data-db:
    container_name: sport_data_db
    image: debezium/postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PWD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      PGPASSWORD: ${POSTGRES_ADMIN_PWD}
    ports:
      - "5432:5432"
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_wal_senders=5
      - -c
      - max_replication_slots=5
    volumes:
      - sport-db-volume:/var/lib/postgresql/data
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_ADMIN_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  init-sport-data-db:
    container_name: init_sport_data_db
    image: python:3.12-slim
    environment:
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_ADMIN_PWD: ${POSTGRES_ADMIN_PWD}
      POSTGRES_DB_HOST: ${POSTGRES_DB_HOST}
      SPORT_DATA_SQL_ALCHEMY_CONN: ${SPORT_DATA_SQL_ALCHEMY_CONN}
      RH_DATA_FILE: ${RH_DATA_FILE}
      SPORTS_DATA_FILE: ${SPORTS_DATA_FILE}
    volumes:
      - ./scripts/${DAG_PACKAGE}/init-db.py:/app/init-db.py
    working_dir: /app
    networks:
      - frontend
    command: >
      sh -c "pip install --upgrade pip && pip install pandas openpyxl sqlalchemy psycopg2-binary dotenv && python init-db.py"
    depends_on:
      sport-data-db:
        condition: service_healthy
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v25.2.1
    container_name: redpanda
    command:
      - redpanda start
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  redpanda-console:
    container_name: redpanda_console
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    networks:
      - frontend
    ports:
      - 8081:8080
    depends_on:
      - redpanda
  debezium:
    image: debezium/connect:2.4
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: redpanda:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
    depends_on: [sport-data-db, redpanda]
    volumes:
      - ./docker/debezium/config:/kafka/config
      - ./docker/debezium/data:/kafka/data
      - ./docker/debezium/logs:/kafka/logs
      - kafka-data:/var/lib/kafka/data
    networks:
      - frontend
    ports:
      - 8083:8083
  debezium-connector-init:
    image: curlimages/curl:8.5.0
    depends_on:
      redpanda:
        condition: service_healthy
      sport-data-db:
        condition: service_healthy
    networks:
      - frontend
    command: >
      sh -c "
      echo 'Attente de Debezium...' &&
      sleep 10 &&
      echo 'Cr√©ation du connecteur Debezium...' &&
      curl -H 'Content-Type: application/json' debezium:8083/connectors --data '
        {
          \"name\": \"postgres-connector\",
          \"config\": {
            \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",
            \"plugin.name\": \"pgoutput\",
            \"database.hostname\": \"${POSTGRES_DB_HOST}\",
            \"database.port\": \"5432\",
            \"database.user\": \"${POSTGRES_ADMIN_USER}\",
            \"database.password\": \"${POSTGRES_ADMIN_PWD}\",
            \"database.dbname\": \"${POSTGRES_DB_NAME}\",
            \"database.server.name\": \"${POSTGRES_DB_HOST}\",
            \"table.include.list\": \"public.activities\",
            \"topic.prefix\" : \"sport_data\"
          }
        }'
      "
  slack-consumer:
    container_name: slack_consumer
    image: python:3.12-slim
    environment:
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_ADMIN_PWD: ${POSTGRES_ADMIN_PWD}
      POSTGRES_DB_HOST: ${POSTGRES_DB_HOST}
      SLACK_TOKEN: ${SLACK_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      SLACK_USERNAME: ${SLACK_USERNAME}
    volumes:
      - ./scripts/slack/redpanda_to_slack.py:/app/redpanda_to_slack.py
    working_dir: /app
    command: >
      sh -c "pip install --upgrade pip && pip install slack_sdk confluent-kafka dotenv babel psycopg2-binary && python redpanda_to_slack.py"
    networks:
      - frontend
    depends_on:
      redpanda:
        condition: service_healthy
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PWD}
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_ADMIN_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - frontend
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - frontend
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - frontend
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /config
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,config}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - frontend
    volumes:
      - ./docker/airflow:/sources
      - ./scripts/${DAG_PACKAGE}/variables.json:/sources/dags/${DAG_PACKAGE}/variables.json
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - frontend
    ports:
        - "9090:9090"
    restart: unless-stopped
  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PWD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - frontend
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    restart: unless-stopped
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgresql-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PWD}@${POSTGRES_DB_HOST}/${POSTGRES_DB_NAME}?sslmode=disable"
    depends_on:
      prometheus:
        condition: service_started
      sport-data-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - frontend
  strava-like-server:
    container_name: strava_like_server
    image: python:3.12-slim
    ports:
      - "5000:5000"
    volumes:
      - ./scripts/strava_like/server.py:/app/server.py
    working_dir: /app
    networks:
      - frontend
    command: >
      sh -c "pip install --upgrade pip && pip install flask && python server.py"
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark_master
    environment:
      - SPARK_MODE=master
    ports:
      - "8084:8080"   # Web UI du Master
      - "7077:7077"   # Port Spark Master
    volumes:
      - ./scripts/spark:/opt/spark-apps
      - ./docker/spark/data:/opt/spark-data
    networks:
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'cat < /dev/null > /dev/tcp/localhost/8080'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark_worker
    volumes:
      - ./scripts/spark:/opt/spark-apps
      - ./docker/spark/data:/opt/spark-data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - HOME=/tmp
    networks:
      - frontend
    depends_on:
      - spark-master
  spark-job:
    image: bitnami/spark:3.5.0
    container_name: spark_job
    depends_on:
      redpanda:
          condition: service_healthy    
      spark-master:
          condition: service_healthy    
      sport-data-db:
          condition: service_healthy    
    volumes:
      - ./scripts/spark:/opt/spark-apps
      - ./docker/spark/data:/opt/spark-data
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - frontend
    command: >
      spark-submit
        --master spark://spark-master:7077
        --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.postgresql:postgresql:42.7.3,io.delta:delta-spark_2.12:3.2.0
        --conf spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension
        --conf spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog
        /opt/spark-apps/rewards.py
volumes:
  airflow-db-volume:
  sport-db-volume:
  prometheus:
  grafana:
  postgresql-exporter:
  redpanda:
  kafka-data:
networks:
  frontend:
    # Specify driver options
    driver: bridge